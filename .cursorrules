{
  "project": {
    "name": "OpenAI-compatible Vector Stores API (FastAPI + PGVector)",
    "summary": "FastAPI service exposing OpenAI Vector Store-like endpoints backed by Postgres + pgvector, Prisma Python client, and embeddings via LiteLLM proxy. Includes admin UI for runtime configuration.",
    "stack": [
      "Python 3.11",
      "FastAPI",
      "Uvicorn",
      "Prisma (prisma-client-py)",
      "PostgreSQL + pgvector",
      "Pydantic v2",
      "LiteLLM (proxy for embeddings)",
      "React + TypeScript + Vite (Admin UI)",
      "Docker",
      "shadcn/ui components"
    ]
  },
  "entrypoints": {
    "app": "main.py",
    "dockerfile": "Dockerfile",
    "dockerfile_backend": "Dockerfile.backend",
    "admin_dockerfile": "admin-ui/Dockerfile",
    "schema": "prisma/schema.prisma",
    "admin_ui": "admin-ui/src/App.tsx"
  },
  "run": {
    "local": [
      "pip install -r requirements.txt",
      "prisma generate",
      "prisma db push",
      "uvicorn main:app --host 0.0.0.0 --port 8000 --reload"
    ],
    "admin_ui_local": [
      "cd admin-ui",
      "npm install",
      "npm run dev"
    ],
    "env_file": ".env",
    "env_required": [
      "DATABASE_URL",
      "OPENAI_API_KEY (if calling OpenAI directly; not required for LiteLLM)",
      "HOST",
      "PORT",
      "EMBEDDING__MODEL",
      "EMBEDDING__BASE_URL",
      "EMBEDDING__API_KEY",
      "EMBEDDING__DIMENSIONS",
      "DB_FIELDS__ID_FIELD",
      "DB_FIELDS__CONTENT_FIELD",
      "DB_FIELDS__METADATA_FIELD",
      "DB_FIELDS__EMBEDDING_FIELD",
      "DB_FIELDS__VECTOR_STORE_ID_FIELD",
      "DB_FIELDS__CREATED_AT_FIELD",
      "SERVER_API_KEY ( Authorization: Bearer <key> )"
    ],
    "docker": [
      "docker build -t vector-store-api .",
      "docker run -p 8000:8000 --env-file .env vector-store-api"
    ],
    "docker_separate": [
      "Build backend: docker build -f Dockerfile.backend -t vector-store-backend .",
      "Build admin UI: cd admin-ui && docker build -t vector-store-admin .",
      "Use build scripts: scripts/build-backend.sh, scripts/build-frontend.sh, scripts/build-image.sh"
    ],
    "health": "GET /health",
    "auto_migrate": "Set AUTO_MIGRATE=true in env to run prisma db push on startup (non-fatal if fails)"
  },
  "api_contract": {
    "auth": "HTTP Bearer token must equal settings.server_api_key (effective value from env + DB overlay)",
    "base_paths": ["/v1/vector_stores", "/vector_stores"],
    "endpoints": {
      "POST /v1/vector_stores": "Create vector store",
      "GET /v1/vector_stores": "List vector stores (limit, after, before)",
      "POST /v1/vector_stores/{vector_store_id}/search": "Similarity search with optional metadata filters",
      "POST /vector_stores/{vector_store_id}/search": "Legacy/alt route (same contract)",
      "POST /v1/vector_stores/{vector_store_id}/embeddings": "Insert single embedding",
      "POST /v1/vector_stores/{vector_store_id}/embeddings/batch": "Batch insert embeddings",
      "GET /health": "Health check",
      "GET /admin": "Admin UI (served from static/admin if built)"
    },
    "admin_endpoints": {
      "GET /v1/admin/settings": "Get effective settings (secrets redacted)",
      "PUT /v1/admin/settings": "Update settings groups (server, auth, embedding, db_fields, cors)",
      "GET /v1/admin/settings/schema": "Get editable schema",
      "POST /v1/admin/settings/test": "Test DB and embedding connectivity"
    },
    "response_models": "Defined in models.py (Pydantic v2)"
  },
  "data_model": {
    "tables": [
      {
        "name": "vector_stores",
        "fields": ["id", "name", "file_counts", "status", "usage_bytes", "created_at", "expires_after", "expires_at", "last_active_at", "metadata"]
      },
      {
        "name": "embeddings",
        "fields": ["id", "vector_store_id", "content", "embedding (vector(1536))", "metadata", "created_at"]
      },
      {
        "name": "app_settings",
        "fields": ["key", "value (JSON)", "updated_at", "updated_by"],
        "purpose": "Runtime settings overlay stored in DB; keys: server, auth, embedding, db_fields, cors"
      }
    ],
    "prisma_schema": "prisma/schema.prisma",
    "field_mapping": "config.DatabaseFieldConfig controls db field names used in raw SQL"
  },
  "settings_management": {
    "overlay_system": "SettingsManager merges env defaults with DB overlays from app_settings table",
    "hot_reload": "Settings changes apply immediately via callbacks (no restart needed)",
    "embedding_hot_reload": "Embedding config changes hot-apply to embedding_service via callback",
    "secrets": "Secrets (API keys) are write-only in PUT; GET returns redacted values",
    "file": "config.py - SettingsManager class with overlay loading and application",
    "groups": ["server", "auth", "embedding", "db_fields", "cors"]
  },
  "admin_ui": {
    "stack": ["React", "TypeScript", "Vite", "shadcn/ui", "Tailwind CSS"],
    "location": "admin-ui/",
    "build_output": "static/admin/",
    "features": ["Settings configuration UI", "DB connectivity testing", "Embedding service testing"],
    "served_at": "/admin (mounted as StaticFiles in main.py)"
  },
  "embedding": {
    "source": "LiteLLM proxy via litellm.aembedding",
    "config": "config.EmbeddingConfig (model, base_url, api_key, dimensions)",
    "file": "embedding_service.py",
    "service": "EmbeddingService class with global instance embedding_service",
    "hot_config": "update_config() method supports hot-reload via SettingsManager callback",
    "notes": "Embedding dimensions must match config.dimensions; batch and single helpers provided"
  },
  "files": {
    "main.py": "FastAPI app, routes, auth, DB access via Prisma.query_raw, vector math, pagination, admin router, static file serving",
    "models.py": "Pydantic models for request/response schemas",
    "config.py": "Settings via pydantic-settings; env-nested delimiter __ supported; SettingsManager for overlay system",
    "embedding_service.py": "Async embedding generation using LiteLLM proxy with hot-reload support",
    "prisma/schema.prisma": "Database schema and table mappings (VectorStore, Embedding, AppSetting)",
    "Dockerfile": "Multi-stage build for combined backend + admin UI",
    "Dockerfile.backend": "Backend-only container",
    "admin-ui/Dockerfile": "Admin UI build container",
    "admin-ui/src/App.tsx": "Main admin UI React component",
    "scripts/build-backend.sh": "Backend Docker build script",
    "scripts/build-frontend.sh": "Frontend build script",
    "scripts/build-image.sh": "Combined image build script",
    "scripts/migrate.sh": "Database migration script",
    "README.md": "Usage, endpoints, setup"
  },
  "deployment": {
    "docker": {
      "combined": "Dockerfile builds backend + admin UI in one image",
      "separate": "Dockerfile.backend (backend only) + admin-ui/Dockerfile (UI build)",
      "scripts": "Use build scripts for production builds (multi-platform support)"
    },
    "startup": {
      "auto_migrate": "AUTO_MIGRATE=true runs prisma db push on startup (non-fatal)",
      "settings_load": "Loads settings overlay from DB on startup",
      "health_checks": "Health endpoint available for orchestration"
    }
  },
  "constraints": [
    "Do not break existing API paths or response shapes (OpenAI-compatible).",
    "Preserve async patterns; avoid blocking I/O in request handlers.",
    "Keep raw SQL placeholders and parameter ordering compatible with Prisma query_raw.",
    "Respect configurable DB field names from settings.db_fields everywhere.",
    "Do not change embedding dimensionality without updating schema + config coherently.",
    "Avoid schema changes unless Prisma schema and migrations are updated in tandem.",
    "Preserve auth behavior: Authorization: Bearer must equal settings.server_api_key (effective).",
    "Do not introduce heavy logging at INFO in hot paths; prefer DEBUG level guarded logs.",
    "Settings overlay system must preserve env defaults; DB overlays merge, not replace.",
    "Admin UI changes must maintain API compatibility; UI is a consumer of the admin API."
  ],
  "safe_improvements": [
    "Add robust error messages and trace logging under DEBUG.",
    "Validate request limits (cap at 100 as implemented) and inputs (types, sizes).",
    "Extend search pagination (has_more/next_page) without changing current defaults.",
    "Improve metadata filtering ergonomics while keeping JSONB query semantics.",
    "Add ci-friendly startup checks for database availability.",
    "Optional: configurable CORS origins via env (already supported in overlay system).",
    "Enhance admin UI with additional features (settings validation, history, etc.).",
    "Add rate limiting, usage analytics, and monitoring (see BACKLOG.md)."
  ],
  "anti_patterns": [
    "Blocking network or file I/O inside request handlers without asyncio-friendly libs.",
    "Hardcoding table/field names instead of using settings.db_fields and settings.table_names.",
    "Catching broad Exceptions without returning meaningful HTTP errors.",
    "Converting embeddings to incorrect vector formats for pgvector.",
    "Increasing default limits beyond safe caps without pagination.",
    "Mutating base settings directly; always use overlay system for runtime changes.",
    "Exposing secrets in GET responses; always redact API keys in admin endpoints.",
    "Breaking hot-reload by not registering callbacks with SettingsManager."
  ],
  "how_to_add": {
    "endpoint": [
      "Define request/response models in models.py (Pydantic).",
      "Add FastAPI route in main.py using async def and Depends(get_api_key).",
      "Use Prisma 'db.query_raw' with parameter placeholders ($1, $2, ...) and settings.db_fields.",
      "Return Pydantic models; keep timestamps as epoch seconds where applicable."
    ],
    "admin_endpoint": [
      "Add route to admin_router (defined in main.py).",
      "Use Depends(get_api_key) for auth.",
      "Redact secrets in GET responses using _redact_secrets helper.",
      "Update settings via settings_manager.apply_overlay() for PUT endpoints."
    ],
    "db_field": [
      "Add to DatabaseFieldConfig in config.py with sensible defaults.",
      "Reference via settings.db_fields.<field> in SQL queries.",
      "Update Prisma schema if adding new table columns."
    ],
    "embedding_usage": [
      "Prefer embedding_service.generate_embedding(s) for correctness and validation.",
      "Ensure returned length == settings.embedding.dimensions before insert/search."
    ],
    "settings_group": [
      "Add to AppSettingsOverlay in config.py.",
      "Update merge_settings_with_overlay() to handle new group.",
      "Add to SettingsManager.load_overlay_from_db() key mapping.",
      "Include in admin API schema endpoint response."
    ],
    "admin_ui_feature": [
      "Add component in admin-ui/src/components/.",
      "Update App.tsx to include new feature.",
      "Maintain API contract compatibility with backend."
    ]
  },
  "testing": {
    "manual": [
      "curl -H 'Authorization: Bearer <key>' http://localhost:8000/health",
      "Create vector store, add embedding(s), run search as in README examples",
      "Test admin settings: GET/PUT /v1/admin/settings",
      "Test connectivity: POST /v1/admin/settings/test"
    ]
  },
  "style": {
    "python": {
      "naming": "Descriptive, no 1-2 char names; functions verb phrases; variables noun phrases",
      "types": "Annotate function signatures and public APIs explicitly",
      "errors": "Use guard clauses; avoid unnecessary try/except; never swallow errors",
      "comments": "Only for non-obvious rationale and edge cases",
      "format": "Match existing formatting; avoid unrelated reformatting"
    },
    "typescript": {
      "naming": "Follow React/TypeScript conventions; PascalCase for components, camelCase for functions",
      "components": "Use shadcn/ui components from components/ui/ directory",
      "api": "Call admin API endpoints with proper error handling",
      "format": "Match existing formatting; use TypeScript strict mode"
    }
  },
  "backlog": {
    "file": "BACKLOG.md",
    "contains": "Prioritized feature list (P0-P3) including CRUD operations, hybrid search, analytics, rate limiting, multi-tenant, etc."
  }
}
